{"version":3,"sources":["Request.js","Showtime.js","Todilist/Todoing.js","Todilist/Todoinput.js","Todilist/Todolist.js","index.js"],"names":["Request","state","data","fetch","then","res","json","setState","result","console","log","this","map","item","index","key","album_title","author","Component","Todoing","props","todo","idx","onClick","delitem","Todoinput","handleInput","e","keyCode","addTodo","val","handleChange","target","name","value","n1","n2","onChange","onKeyDown","type","ReactDOM","render","word","document","getElementById"],"mappings":"uPAEqBA,G,kBACjB,aAAc,IAAD,8BACT,+CACKC,MAAQ,CACTC,KAAK,IAHA,E,iFAMO,IAAD,OACfC,MAAM,uDACDC,MAAK,SAACC,GACH,OAAOA,EAAIC,UAEdF,MAAK,SAACC,GACH,EAAKE,SAAS,CACVL,KAAKG,EAAIG,SAEbC,QAAQC,IAAIL,Q,+BAYpB,OACI,6BACI,wDACA,4BAEQM,KAAKV,MAAMC,KAAKU,KACZ,SAACC,EAAKC,GAAN,OACI,wBAAIC,IAAKD,GACL,4BAAKD,EAAKG,aACV,2BAAIH,EAAKI,kB,GArCRC,c,UCAdA,Y,MCAFC,E,iLACP,IAAD,OACL,OACI,6BACI,wDACA,4BAEQR,KAAKS,MAAMC,KAAKT,KAAI,SAACC,EAAKS,GAAN,OAAY,wBAAIP,IAAKF,GAAOA,EAAhB,OAAyB,4BAAQU,QAAS,kBAAI,EAAKH,MAAMI,QAAQF,KAAxC,0B,GAP5CJ,a,QCwBhBO,E,YAEjB,aAAc,IAAD,8BACT,+CAMJC,YAAY,SAACC,GACM,KAAZA,EAAEC,SACD,EAAKR,MAAMS,QAAQ,EAAK5B,MAAM6B,MATzB,EAYbC,aAAe,SAACJ,GACZ,EAAKpB,SAAL,eACKoB,EAAEK,OAAOC,KAAON,EAAEK,OAAOE,SAZ9B,EAAKjC,MAAQ,CACTkC,GAAI,EACJC,GAAI,GAJC,E,sEAiBH,IAAD,OACL,OACI,6BACI,2BAAOH,KAAK,KAAKI,SAAU,SAACV,GAAD,OAAK,EAAKI,aAAaJ,IAAIO,MAAOvB,KAAKV,MAAMkC,GAAIG,UAAW,SAACX,GAAD,OAAK,EAAKD,YAAYC,IAAIY,KAAK,SAD1H,IAGI,2BAAON,KAAK,KAAKI,SAAU,SAACV,GAAD,OAAK,EAAKI,aAAaJ,IAAIO,MAAOvB,KAAKV,MAAMmC,GAAIE,UAAW,SAACX,GAAD,OAAK,EAAKD,YAAYC,IAAIY,KAAK,SACtH,2BAAI5B,KAAKV,MAAMkC,GAAGxB,KAAKV,MAAMmC,IAC7B,qD,GA1BuBlB,aCtBDA,YCItCsB,IAASC,OAAO,kBAAC,EAAD,CAASC,KAAK,UAAUC,SAASC,eAAe,W","file":"static/js/main.9c06881c.chunk.js","sourcesContent":["import React, { Component } from 'react'\r\nimport Axios from 'axios';\r\nexport default class Request extends Component {\r\n    constructor(){\r\n        super();\r\n        this.state = {\r\n            data:[]\r\n        }\r\n    }\r\n    componentDidMount(){\r\n        fetch('https://api.apiopen.top/musicRankingsDetails?type=1')\r\n            .then((res)=>{\r\n                return res.json();\r\n            })\r\n            .then((res)=>{\r\n                this.setState({\r\n                    data:res.result\r\n                })\r\n                console.log(res);\r\n            })\r\n           \r\n        // Axios.get('https://api.apiopen.top/musicRankingsDetails?type=1')\r\n        //     .then((res)=>{\r\n        //         console.log(res);\r\n        //         this.setState({\r\n        //             data: res.data.result\r\n        //         })\r\n        //     })\r\n    }\r\n    render() {\r\n        return (\r\n            <div>\r\n                <h1>请求接口</h1>\r\n                <ul>\r\n                    {\r\n                        this.state.data.map(\r\n                            (item,index)=>(\r\n                                <li key={index}>\r\n                                    <h2>{item.album_title}</h2>\r\n                                    <p>{item.author}</p>\r\n                                </li>\r\n                            )\r\n                        )\r\n                    }\r\n                    \r\n                </ul>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\n","import  React,{Component,Fragment} from 'react';\r\n// 类定义组件\r\nclass Showtime extends Component{\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            time: new Date().toLocaleString()\r\n        }\r\n        this.handleClick=this.handleClick.bind(this);\r\n        console.log('constructor',this.props.word);\r\n    }\r\n    componentDidMount(){\r\n        console.log('componentDidMount');\r\n        setTimeout(()=>{\r\n            console.log(1)\r\n            this.setState({\r\n                time: new Date().toLocaleString()\r\n            })\r\n        },1000)\r\n    }\r\n    shouldComponentUpdate(){\r\n        return true;\r\n    }\r\n    getSnapshotBeforeUpdate(){\r\n        console.log('getsnapshot');\r\n    }\r\n    componentDidUpdate(){\r\n        console.log('didupdate');\r\n        \r\n    }\r\n    handleClick=(num,e)=>{\r\n        console.log(num,e);\r\n        console.log('点击成功');\r\n    }\r\n    divClick=(num,e)=>{\r\n        console.log(num,e);\r\n    }\r\n    render(){\r\n        console.log('render');\r\n\r\n        return (\r\n            <Fragment>\r\n                {/* <div onClick={()=>{\r\n                    console.log(1);\r\n                }}>{this.state.time}</div> */}\r\n                <div onClick={(ev)=>this.handleClick(1,ev)}>{this.state.time}</div>\r\n                <div onClick={this.divClick.bind(this,333)}>hello{this.props.word}</div>\r\n            </Fragment>\r\n        );\r\n    }\r\n}\r\n//默认导出，只能导出一次\r\n//export default Showtime;\r\n\r\nexport {Showtime}","import React, { Component } from 'react'\r\n\r\nexport default class Todoing extends Component {\r\n    render() {\r\n        return (\r\n            <div>\r\n                <h1>正在运行</h1>\r\n                <ul>\r\n                    {\r\n                        this.props.todo.map((item,idx)=><li key={item}>{item}----<button onClick={()=>this.props.delitem(idx)}>删除</button></li>)\r\n                    }\r\n                </ul>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import React, { Component } from 'react'\r\n//子组件--->父组件传递数据，调用子组件时往子组件传递一个函数\r\n//子组件通过props调用该函数\r\n\r\n// 受控组件和非受控组件\r\n//非受控组件\r\n// 代码简单、比较适用于一次性获取表单的值\r\n// export default class Todoinput extends Component{\r\n//     componentDidMount(){\r\n//         //console.log(this.inp);\r\n//         console.log(this.refs)\r\n//     }\r\n//     search=()=>{\r\n//         console.log(this.inp.value)\r\n//     }\r\n//     render(){\r\n//         return (<div>\r\n//                   <input ref={(inp)=>this.inp=inp} type='text'/>\r\n//                   <button onClick={this.search}>查询</button>\r\n//                </div>)\r\n//     }\r\n\r\n// }\r\n\r\n// 受控组件：value值被react的状态控制\r\n// 实时获取或处理输入的内容\r\nexport default class Todoinput extends Component {\r\n\r\n    constructor(){\r\n        super();\r\n        this.state = {\r\n            n1: 0,\r\n            n2: 0\r\n        }\r\n    }\r\n    handleInput=(e)=>{\r\n        if(e.keyCode===13){\r\n            this.props.addTodo(this.state.val);\r\n        }\r\n    }\r\n    handleChange = (e)=>{\r\n        this.setState({\r\n            [e.target.name]: e.target.value\r\n        })\r\n    }\r\n    render() {\r\n        return (\r\n            <div>\r\n                <input name='n1' onChange={(e)=>this.handleChange(e)} value={this.state.n1} onKeyDown={(e)=>this.handleInput(e)} type=\"text\"/>\r\n                +\r\n                <input name='n2' onChange={(e)=>this.handleChange(e)} value={this.state.n2} onKeyDown={(e)=>this.handleInput(e)} type=\"text\"/>\r\n                <p>{this.state.n1+this.state.n2}</p>\r\n                <button>查询</button>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import React, { Component } from 'react'\r\nimport Todoing from './Todoing'\r\nimport Todoinput from './Todoinput'\r\n\r\nexport default class Todolist extends Component {\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            todo:[1,2,3]\r\n        }\r\n        // var arr = [1,2,{a:100}];\r\n        // 深拷贝\r\n        // var b = JSON.parse(JSON.stringify(arr));\r\n        // b[2].a = 200;\r\n        // console.log(arr);\r\n\r\n        // 对象的拷贝\r\n        var a= {a:100,b:200};\r\n        // var o = Object.assign({},a);\r\n        // console.log(o===a);\r\n        // console.log(o);\r\n        // Object.keys返回由属性名组成的一个数组\r\n        Object.keys(a).forEach((item)=>{\r\n            console.log(item);\r\n            console.log(a[item]);\r\n        })\r\n        // 尽量不用for in\r\n        // for(var item in a){\r\n        //     console.log(a);\r\n        // }\r\n    }\r\n    addItem=(msg)=>{\r\n        // this.state.todo.push(msg)\r\n        // console.log(this.state.todo)\r\n        this.setState({\r\n            todo:[...this.state.todo,msg]\r\n        })\r\n        console.log(msg);\r\n    }\r\n    delItem=(a)=>{\r\n        this.state.todo.splice(a,1);\r\n        //深拷贝\\浅拷贝\r\n        var todo=[...this.state.todo]\r\n        todo.splice(a,1);\r\n        this.setState({\r\n            todo:todo\r\n        })\r\n        console.log(a);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <Todoinput addTodo={this.addItem}></Todoinput>\r\n                <Todoing delitem={this.delItem} todo={this.state.todo}></Todoing>   \r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Requset from './Request';\nimport {Showtime} from './Showtime'\nimport Todolist from './Todilist/Todolist'\n//ReactDOM.render(<Showtime word=\"react\"/>,document.getElementById('root'));\n//ReactDOM.render(<Todolist word=\"react\"/>,document.getElementById('root'));\nReactDOM.render(<Requset word=\"react\"/>,document.getElementById('root'));\n\n\n\n\n// // 函数定义组件\n// function Todo(props){\n//     return (\n//         <div>\n//             {/* 条件渲染 */}\n//             {props.list.length>=6?<h1>todo</h1>:''}\n//             {props.list.length>=5&&<h1>todo</h1>}\n//             <ul>\n//                 {/* 循环渲染 */}\n                \n//                 {\n//                     // props.list.map((item,index)=>{\n//                     //     if(index%2===0){\n//                     //         return <li key={item}>{item}</li>\n//                     //     }\n//                     // })\n//                     props.list.map(\n//                         (item,index)=> index%2 === 0&&<li key={item}>{item}</li>\n//                     )\n//                 }\n//             </ul>\n//         </div>\n//     )\n// }\n// var item = [1,2,3,4,5];\n// ReactDOM.render(<Todo list={item}/>,document.getElementById('root'));\n\n\n// react元素创建后不可改变\n// function tick(){\n//     var e = <div>\n//                 <p>当前时间</p>\n//                 <p>当前时间</p>\n//                 <h1>{new Date().toLocaleString()}</h1>;\n//             </div>\n//     ReactDOM.render(e,document.getElementById('root'));\n// }\n// tick();\n// setInterval(tick,1000);\n\n//import { maxHeaderSize } from 'http';\n//import './index.css';\n//import App from './App';\n//import * as serviceWorker from './serviceWorker';\n\n/*var ele=React.createElement(\n    'div',{'id':'box'},'hello',React.createElement('h1',{'id':'h'},'react')\n);*/\n//var str='hello';\n//var ele=<h1>{str}</h1>;\n//jsx表达式会被react转成一个对象，类似下面声明\n\n// var ele = React.createElement(\n//     'div',\n//     {'id':'box'},\n//     'hello',\n//     React.createElement(\n//         'h1',\n//         {'id':'h'},\n//         'react'\n//     )\n// );\n// var obj={\n//     type:'div',\n//     props:{\n//         id:'box',\n//         class:'box',\n//         children:['hello',{\n//             type:'h1',\n//             props:{\n//                 id:'h',\n//                 class:'h',\n//                 children:['react']\n//             }\n//         }]\n//     }\n// }\n\n\n//自己声明rend函数，实现页面渲染\n// function render(obj,container){\n//     var {type,props}=obj;\n//     //文档碎片\n//     var fr=document.createDocumentFragment();\n//     var ele =document.createDocumentFragment(type);\n//     for(var item in props){\n//         if(item==='class'){\n//             ele.className=props[item];\n//         }else if(item==='children'){\n//             for(var i=0;i<props[item].length;i++){\n//                 if(typeof props[item][i]==='object'){\n//                     render(props[item][i],ele);\n//                 }else{\n//                     var txt=document.createTextNode(props[item][i]);\n//                     ele.appendChild(txt);\n//                 }   \n//             }\n//         }else{\n//             ele[item]=props[item];\n//         }   \n//     }\n//   //  ele.id=obj.props.id;\n//    // ele.innerHTML=obj.props.children[0];\n//    fr.appendChild(ele);\n//    container.appendChild(fr);\n// }\n\n// render(obj,document.getElementById('root'));\n\n//ReactDOM.render(ele, document.getElementById('root'));\n//注意以下！\n/*加载html文件、浏览器解析html生成DOM树\n  link加载css文件，解析css规则、和DOM树结合生成render tree、浏览器引擎渲染render tree\n*/\n//页面回流（重排）\n//页面重绘（把字体颜色、背景颜色等样式改变改一下）\n// var root=document.getElementById('root');\n// var width=root.offsetWidth;\n// setInterval(function(){\n//     width+=1;\n//     root.style.width=width+'px';\n// },100)\n\n//display/width/height/font-size 等会引起页面回流\n//node.offsetLeft/node.offsetWidth等慎用\n//声明一个css的一个类\n// document.body.style.width = '100px';\n// document.body.style.height = '100px';\n// .change{\n//     width:100px;\n//     height:100px;\n// }\n//document.body.className='change';\n// console.time('a');\n// var str = '';\n// for(var i=0;i<1000;i++){\n//     str += '<li>'+i+'</li>';\n// }\n// document.body.innerHTML = str;\n// console.timeEnd('a');\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n//serviceWorker.unregister();\n"],"sourceRoot":""}